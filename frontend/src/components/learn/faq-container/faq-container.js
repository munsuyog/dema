import React, { useState } from "react";
import "./faq-container.css";
import Image from "next/image";
import FaqCard from "./faq-card/faq-card";

const FaqContainer = ({ faq, theme }) => {
  const [isOpen, setIsOpen] = useState(true);
  const title = faq.attributes.title;
  const highlightedWord = faq.attributes.highlightWord;

  // Function to wrap "dema" in the title with the title-dema class
  const wrapDema = (text) => {
    return text.replace(
      /\b(d)(e)(m)(a)\b/gi,
      '<span class="title-dema">$1<span class="title-blue">$2</span>$3$4</span>'
    );
  };

  // Function to highlight the specified word
  const highlightWord = (text, word) => {
    if(!word) {
      return text;
    }
    else {
      return text.replace(
        new RegExp(
          `(${word.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")})([?.!,;:"]?)`,
          "gi"
        ),
        `<span class="highlighted">
          $1$2
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 145 76" fill="none">
            <path d="M134.651 51.6261C94.8866 64.7921 13.2223 81.4097 4.68372 42.5514C-5.9895 -6.02137 129.64 -8.39449 140.194 31.4078C147.216 57.892 122.256 71.8645 113.077 72.1071" stroke='${theme == 'secondary' ?  "#22E393" : "#3830C9"}' stroke-width="7"/>
          </svg>
        </span>`
      );
    }
  };
  const highlightWordPoints = (text, word) => {
    if(!word) {
      return text
    } else {
      return text.replace(
        new RegExp(
          `(${word.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")})([?.!,;:"]?)`,
          "gi"
        ),
        `<span class="highlighted-points-title">
          $1$2
          <svg xmlns="http://www.w3.org/2000/svg" width="217" height="17" viewBox="0 0 217 17" fill="none">
            <path d="M216 8.32432L100.902 2L166.753 15L0.999998 2" stroke="#3830C9" stroke-width="4"/>
          </svg>
        </span>`
      );
    }
  };

  // Apply the wrapping and highlighting
  const processedTitle = wrapDema(highlightWord(title, highlightedWord));

if(!faq.attributes.isPointsFAQ) {
  return (
    <div className="learn-faq-container" id={faq.attributes.slug}>
      <div
        className="learn-faq-container-before"
        style={{
          background: `${
            theme == "secondary"
              ? "linear-gradient(0deg, rgba(242, 251, 249, 0) 0%, #E7FFFA 98.04%)"
              : "linear-gradient(to bottom,rgba(239, 247, 255, 1),rgba(239, 247, 255, 0) 70%)"
          }`,
          transform: `${theme == "secondary" ? 'rotate(-2deg)' : 'rotate(2deg)'}`
        }}
      ></div>
      <div className="learn-faq-header">
        <div className="learn-faq-header-title-section">
          <div className="learn-faq-title-wrapper">
            <h3 dangerouslySetInnerHTML={{ __html: processedTitle }}></h3>
            <p
              className="paragraph-regular"
              dangerouslySetInnerHTML={{
                __html: wrapDema(faq.attributes.description),
              }}
            ></p>
          </div>
          { 
              faq.attributes.headerImage.data && (<Image
                src={`http://154.53.59.178:30002${faq.attributes.headerImage.data.attributes.url}`}
                width={200}
                height={200}
                alt="header-image"
                className="learn-faq-header-image"
              />)
          }
        </div>
        <div>
          <a className={`learn-faq-header-dropdown ${isOpen ? 'active' : ''}`} onClick={() => {setIsOpen(!isOpen)}}>
            <svg
              width="38"
              height="38"
              viewBox="0 0 38 38"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <rect
                width="38"
                height="38"
                rx="6.33333"
                fill={theme == "secondary" ? "#22E393" : "#3830C9"}
              />
              <path
                d="M12.226 22.625C12.3363 22.7308 12.4675 22.8148 12.6121 22.8721C12.7567 22.9295 12.9118 22.959 13.0684 22.959C13.225 22.959 13.3801 22.9295 13.5247 22.8721C13.6693 22.8148 13.8005 22.7308 13.9108 22.625L19.001 17.77L24.0912 22.625C24.3146 22.8376 24.6177 22.9571 24.9336 22.9571C25.2496 22.9571 25.5526 22.8376 25.7761 22.625C25.9995 22.4124 26.125 22.124 26.125 21.8234C26.125 21.5227 25.9995 21.2343 25.7761 21.0217L19.8434 15.3763C19.7331 15.2705 19.6019 15.1865 19.4573 15.1292C19.3127 15.0718 19.1576 15.0423 19.001 15.0423C18.8444 15.0423 18.6893 15.0718 18.5447 15.1292C18.4001 15.1865 18.2689 15.2705 18.1586 15.3763L12.226 21.0217C12.1148 21.1267 12.0265 21.2515 11.9663 21.3891C11.906 21.5267 11.875 21.6743 11.875 21.8234C11.875 21.9724 11.906 22.12 11.9663 22.2576C12.0265 22.3952 12.1148 22.52 12.226 22.625Z"
                fill="white"
              />
            </svg>
          </a>
        </div>
      </div>
      <div className={`learn-faq-card-container ${isOpen ? 'active' : ''}`}>
        {faq.attributes.tab.length > 0 &&
          faq.attributes.tab.map((tab, index) => (
            <FaqCard tab={tab} key={index} theme={theme} />
          ))}
      </div>
    </div>
  );
} else {
  return(
    <div id={faq.attributes.slug} className="learn-faq-points-container" style={{          background: `${
      theme == "secondary"
        ? "linear-gradient(to bottom,rgba(231, 255, 250, 1),rgba(242, 251, 249, 0) 70%)"
        : "linear-gradient(to bottom,rgba(239, 247, 255, 1),rgba(239, 247, 255, 0) 70%)"
    }`,}}>
      <div className="learn-faq-points-title-section">
        <h3 dangerouslySetInnerHTML={{__html: wrapDema(highlightWordPoints(faq.attributes.title, highlightedWord))}}></h3>
        <svg width="75" height="64" viewBox="0 0 75 64" fill="none" xmlns="http://www.w3.org/2000/svg" className="learn-faq-points-title-vector">
          <path d="M43.0231 37.6838C41.9632 38.455 41.6586 38.3623 41.3891 37.1977C41.3328 36.9521 41.2322 36.6853 41.0724 36.4976C40.5548 35.8841 40.0576 34.4905 40.0874 33.7245C40.0931 33.5189 40.0454 33.2173 39.9076 33.1162C38.9656 32.4129 39.0125 31.3129 38.7359 30.3444C38.3996 29.163 38.109 27.9667 37.6962 26.8153C37.3898 25.9623 37.2948 25.0613 37.0199 24.233C36.6445 23.1074 35.9482 22.0866 35.3872 21.0173C35.321 20.8943 35.2712 20.7656 35.2226 20.631C34.8654 19.6248 34.4706 18.623 34.1685 17.6006C33.8573 16.549 33.8052 15.5139 34.9383 14.6543C35.0603 15.3207 35.1698 15.9298 35.2906 16.6019C35.5193 16.6183 35.8805 16.6435 36.5853 16.6904C36.1023 17.078 35.8455 17.2869 35.5674 17.5097C35.9431 17.6868 36.2989 17.8569 36.836 18.1096C36.7358 18.4174 36.5856 18.8792 36.4473 19.3129C37.2149 19.2328 37.3723 19.6541 37.0109 21.0058C37.6474 20.8807 38.1099 20.8293 37.7425 21.7665C37.6237 22.0614 37.2509 22.891 38.2611 22.8788C38.3808 22.8759 38.5004 23.1101 38.6218 23.2321C38.4368 23.3889 38.2553 23.5433 38.1481 23.6338C38.7738 25.1297 39.4284 26.6923 40.1364 28.3813C39.5801 28.8725 40.0374 29.3642 40.6663 29.809C40.3821 30.0913 40.171 30.3005 40.1946 30.2749C40.8366 31.1144 41.3994 31.8497 42.003 32.6388C41.6095 32.9475 41.3539 33.1506 41.0547 33.3872C41.2667 33.4397 41.4296 33.4791 41.685 33.5435C41.5195 33.7832 41.3788 33.9916 41.1424 34.3384C42.4566 34.288 42.6486 34.8075 42.4142 35.8844C42.2989 36.414 42.7975 37.0753 43.0207 37.6803L43.0231 37.6838Z" fill="#323232"/>
          <path d="M25.0843 27.4553C26.1248 27.7106 27.0064 28.9578 26.8609 29.8553C28.5928 29.793 27.2924 31.2415 27.9463 31.8312C28.6972 31.5957 29.0845 32.0123 29.356 32.8126C29.5178 33.2864 30.0263 33.6336 30.3373 34.065C30.5539 34.3616 30.7117 34.707 30.8789 35.0361C31.1077 35.4811 30.9928 36.1415 31.7501 36.2447C31.9013 36.2665 32.1571 36.714 32.1193 36.7641C31.1749 37.8933 32.2476 37.5776 32.7707 37.8244C33.0293 37.9472 33.0436 38.5885 33.2004 39.1161C33.8817 39.1733 34.8468 39.246 33.6644 40.5667C34.3072 40.5888 34.7705 40.6075 35.1588 40.62C35.3153 40.9712 35.4567 41.292 35.5658 41.5331C35.1522 41.8802 34.7508 42.3605 34.2346 42.5832C34.0136 42.6779 33.2871 42.277 33.259 42.0432C33.1553 41.2439 32.6469 40.8663 32.1429 40.3346C31.4685 39.6222 31.1242 38.6124 30.556 37.7849C30.046 37.0453 29.4419 36.3624 28.8412 35.6924C28.5811 35.3991 27.8518 35.3229 28.4978 34.7224C28.1665 34.375 27.7763 34.0611 27.512 33.6697C26.6657 32.4144 25.87 31.1208 25.0355 29.8528C24.8376 29.554 24.4926 29.3466 24.3276 29.0363C23.8757 28.193 23.4649 27.3277 23.0811 26.4498C22.8968 26.026 22.8031 25.563 22.6577 25.0834C23.2014 24.9788 23.6759 24.8843 24.0224 24.8184L25.468 27.0017C25.4326 27.0401 25.2756 27.2238 25.0762 27.4505L25.0843 27.4553Z" fill="#323232"/>
          <path d="M14.6204 34.6504C15.9039 35.533 17.1851 36.4121 18.5142 37.3253C18.481 37.3975 18.3754 37.613 18.4122 37.5385C19.2806 38.169 20.0731 38.708 20.8103 39.3087C20.9073 39.3863 20.7327 39.7883 20.6833 40.0426C22.2937 40.3325 24.1618 41.8301 23.7011 42.6418C24.3463 42.6522 25.4395 42.0154 25.1469 43.4633C25.7277 43.4454 25.6418 43.5068 26.0576 44.0812C26.2334 44.3239 26.8556 44.2535 27.3631 44.3391C27.2416 44.6912 27.1475 44.9699 27.0009 45.3989C27.6969 45.1339 28.1927 44.758 28.6297 45.7776C28.9008 46.4167 29.9876 46.7879 30.7837 47.1027C31.6021 47.4281 31.6708 47.5242 31.0441 48.2381C30.8647 48.4416 30.8045 48.7484 30.6394 49.119C29.4508 48.2649 28.1566 47.8634 27.2656 46.6173C26.6332 45.731 25.3188 45.3528 24.3911 44.6402C23.2354 43.7595 22.1849 42.7391 21.0434 41.8338C20.5843 41.4694 19.78 41.3718 19.5465 40.9349C19.1271 40.1409 18.42 39.8534 17.7736 39.4051C16.7099 38.6708 15.605 37.9432 14.7135 37.0253C14.2853 36.5851 14.3098 35.7116 14.1279 35.0391C14.2917 34.9115 14.4554 34.7838 14.6192 34.6562L14.6204 34.6504Z" fill="#323232"/>
          <path d="M53.549 26.524C53.5765 26.8488 53.6173 27.3314 53.649 27.8151C53.6576 27.9658 53.5546 28.1697 53.6229 28.2658C54.4097 29.3386 54.0556 30.3423 53.4219 31.3283C55.0331 31.4511 53.2122 32.3282 53.7831 32.6395C53.3382 32.4725 52.8877 32.3043 52.5643 32.1835C52.378 31.7107 52.1535 31.3182 52.0867 30.9033C52.0285 30.5479 52.2066 30.1588 52.1816 29.7919C52.0694 28.1153 51.9163 26.4455 51.7857 24.7711C51.6928 23.6214 51.5887 22.4693 51.5398 21.3162C51.526 21.0125 51.6964 20.7039 51.7801 20.4018C51.6755 20.2436 51.3622 19.9698 51.4148 19.8194C51.7081 18.9613 51.6439 18.1609 51.3882 17.3C51.199 16.6625 51.2627 15.9551 51.1908 15.2808C51.1285 14.6813 50.8631 14.0434 51.0125 13.5116C51.1224 13.1115 51.7444 12.8496 52.1403 12.5293C52.328 12.9811 52.5285 13.4295 52.699 13.8929C52.8143 14.2053 52.903 14.5305 52.9694 14.8602C53.0393 15.1876 53.1066 15.5266 53.1107 15.8619C53.124 16.9528 53.1051 18.0494 53.1 19.2278C53.75 19.4823 53.8719 20.8296 53.4025 21.9647C53.4153 22.7181 53.4219 23.4704 53.4474 24.2203C53.4673 24.8931 53.5061 25.5638 53.5515 26.5275L53.549 26.524Z" fill="#323232"/>
          <path d="M62.4254 24.1995C62.755 24.4523 62.9708 24.6182 63.2458 24.8263L62.43 25.3617C62.1428 27.1086 62.2346 28.854 60.9708 30.2432C60.8045 30.428 61.0392 31.005 60.8688 31.1525C60.5749 31.4056 59.98 31.6852 59.7484 31.5496C59.4305 31.3599 59.0969 30.7415 59.1805 30.4091C59.6142 28.7225 60.153 27.0575 60.731 25.4125C60.8418 25.0977 61.2964 24.905 61.6219 24.631C60.704 23.574 61.7157 22.5923 61.9438 21.575C62.1265 20.7642 62.6173 20.0286 62.8734 19.2299C63.0096 18.8078 62.8892 18.312 62.9688 17.8662C63.1826 16.6666 63.4142 15.4707 63.6902 14.2808C63.952 13.1458 64.956 13.193 65.8055 12.8926C65.6117 14.0537 65.6239 15.1505 65.2224 16.0745C64.8009 17.0523 64.6831 18.0526 64.3953 18.9878C64.1805 19.6887 64.18 20.4607 63.8958 21.1565C63.5111 22.1052 63.2499 23.1036 62.903 24.1939C62.9943 24.1943 62.781 24.1932 62.428 24.1879L62.4254 24.1995Z" fill="#323232"/>
          <path d="M27.9534 56.3943C27.874 56.5426 27.8421 56.6087 27.8065 56.6778C27.1676 57.9237 26.8167 57.9527 25.4208 57.4813C23.91 56.9749 22.3112 56.7179 20.7802 56.2648C18.7631 55.667 16.7735 54.9807 14.7684 54.3397C14.4475 54.2376 14.1045 54.0944 13.7783 54.1066C12.0674 54.1853 10.8382 53.2319 9.50757 51.9412C10.1114 51.7823 10.7775 51.3805 11.3059 51.5125C12.3651 51.7807 13.3154 52.4436 14.3661 52.7524C15.3372 53.0333 16.3811 53.0643 17.5769 53.2329C17.3936 53.4991 17.2672 53.683 17.0331 54.0182C17.5109 53.9669 17.6777 53.9283 17.8419 53.9313C18.561 53.9384 19.0899 53.299 20.0544 54.1741C20.978 55.0107 22.7983 54.8598 24.2247 55.1392C24.336 55.1621 24.457 55.1382 24.5623 55.1753C25.6771 55.5735 26.7907 55.9773 27.9558 56.3979L27.9534 56.3943Z" fill="#323232"/>
        </svg>
      </div>
      <div className="learn-faq-points-wrapper">
        {faq.attributes.points.map((point, index) => (
        <div className="learn-faq-point" key={index}>
          <svg xmlns="http://www.w3.org/2000/svg" width="22" height="23" viewBox="0 0 22 23" fill="none">
            <path fill-rule="evenodd" clip-rule="evenodd" d="M2 11.5C2 11.0858 2.33579 10.75 2.75 10.75H12.75C13.1642 10.75 13.5 11.0858 13.5 11.5C13.5 11.9142 13.1642 12.25 12.75 12.25H2.75C2.33579 12.25 2 11.9142 2 11.5ZM15.5 11.5C15.5 11.0858 15.8358 10.75 16.25 10.75H18.75C19.1642 10.75 19.5 11.0858 19.5 11.5C19.5 11.9142 19.1642 12.25 18.75 12.25H16.25C15.8358 12.25 15.5 11.9142 15.5 11.5Z" fill="#3830C9"/>
          </svg>
          <p dangerouslySetInnerHTML={{__html: wrapDema(point.point)}}></p>
        </div>
        ))}
      </div>
    </div>
  )
}
}

export default FaqContainer;
